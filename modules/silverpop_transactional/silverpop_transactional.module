<?php

/**
 * This module allows the ability to create transactional emails using
 * the Engage XML API.
 * It also provides a config-only option to use Silverpop for all system emails.
 * See silverpopAPI.inc for more info on the API methods supported.
 * See silverpopXML.inc for more info on the core data connection to Silverpop.
 */

/**
 * Implementation of hook_menu().
 */
function silverpop_transactional_menu() {

  $items = array();
  $items['admin/config/silverpop/transactional'] = array(
    'title' => 'Silverpop Transactional Emails',
    'description' => t('Silverpop Transactional Emails API Settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('silverpop_transactional_admin_settings_form'),
    'access arguments' => array('administer silverpop'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Silverpop account configuration.
 * @return mixed
 */
function silverpop_transactional_admin_settings_form() {

  $form['transactional'] = array(
    '#type' => 'fieldset',
    '#title' => t('Transactional Emails'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['transactional']['silverpop_replace_standard_mail'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use Silverpop for system mailings'),
    '#description' => t('Use Silverpop to send emails initiated by Drupal '
      . 'actions (transactional emails), wherever possible, rather than using '
      . 'the default mail mechanism.'),
    '#default_value' => variable_get('silverpop_replace_standard_mail', FALSE),
  );

  $form['transactional']['mailing_id_mapping'] = array(
    '#type' => 'fieldset',
    '#title' => t('Drupal-Silverpop Mapping'),
    '#description' => t('Use this section to associate Drupal transactional '
      . 'emails with Silverpop autoresponders that you have created for them. '
      . 'Creating a separate autoresponder for each transactional allows you '
      . 'to view Silverpop statistics for each transactional email. The list '
      . 'you see here will grow as new types of transactional emails are '
      . 'created by various Drupal modules. For any transactional email not '
      . 'associated with a Silveprop autoresponder, we will use the default '
      . 'autoresponder indicated below.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $sp = new silverpopAPI();
  $mailing_map = $sp->drupalSPMailMapping();
  $i = 0;
  foreach ($mailing_map['drupal'] as $drupal_mail_key => $sp_mailing_id) {
    $i++;
    $form['transactional']['mailing_id_mapping']['mailing_id_mapping_' . $i . '_drupal'] = array(
      '#prefix' => '<tr><td>',
      '#type' => 'textfield',
      '#title' => t('Drupal Mail Key'),
      '#size' => 64,
      '#maxlength' => 255,
      '#default_value' => empty($drupal_mail_key) ? '' : $drupal_mail_key,
      '#suffix' => '</td>',
    );
    $form['transactional']['mailing_id_mapping']['mailing_id_mapping_' . $i . '_sp'] = array(
      '#prefix' => '<td>',
      '#type' => 'textfield',
      '#title' => t('Silverpop Autoresponder Mailing ID'),
      '#size' => 64,
      '#maxlength' => 255,
      '#default_value' => empty($sp_mailing_id) ? '' : $sp_mailing_id,
      '#suffix' => '</td></tr>',
    );
  }
  // Wrap the collection of field pairs in table tags. This is quite awful.
  if ($i > 0) {
    $form['transactional']['mailing_id_mapping']['mailing_id_mapping_1_drupal']['#prefix'] = '<table><tr><td>';
    $form['transactional']['mailing_id_mapping']['mailing_id_mapping_' . $i . '_sp']['#suffix'] = '<tr><td></table>';
  }

  $form['transactional']['mailing_id_mapping']['silverpop_transactional_default_template_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Default Transactional Mailing ID'),
    '#description' => t('The ID of the Silverpop autoresponder you have '
      . 'created from a specially-constructed template '
      . 'in your Engage account to use for transactional mailings.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => variable_get('silverpop_transactional_default_template_id', NULL),
  );

  $form['transactional']['silverpop_export_unexported_only'] = array(
    '#type' => 'checkbox',
    '#title' => t('Only Export Unexported Events'),
    '#description' => t('When retrieving report data for use in dashboards, '
      . 'etc., only retrieve events that have not already been exported. You '
      . 'should only need to disable this setting if you are (re)building your '
      . 'local data collection.'),
    '#default_value' => variable_get('silverpop_export_unexported_only', TRUE),
  );

  $form['transactional']['silverpop_transactional_field_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Field Name for Transactional Email Contents'),
    '#description' => t('The name of the user field in Silverpop used to store '
      . 'the contents of each transactional email, not including any numeric '
      . 'suffixes (see below). E.g. "TRANSACTIONAL_EMAIL_CONTENTS."'),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => variable_get('silverpop_transactional_field_name', 'TRANSACTIONAL_EMAIL_CONTENTS'),
  );

  $form['transactional']['silverpop_transactional_field_count'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of Fields Used for Transactional Email Contents'),
    '#description' => t('Indicate how many user fields you have created in '
      . 'Silverpop to store the contents of each transactional email. Each '
      . 'field must be named with the name given in the field above, but with '
      . 'a numeric index appended to it (e.g. '
      . '"TRANSACTIONAL_EMAIL_CONTENTS_1," "TRANSACTIONAL_EMAIL_CONTENTS_2," '
      . 'etc.)'),
    '#size' => 40,
    '#maxlength' => 32,
    '#default_value' => variable_get('silverpop_transactional_field_count', 1),
  );

  $form['transactional']['silverpop_use_standard_mail_as_fallback'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use standard mail as a backup method'),
    '#description' => t('If an attempt to send a transactional email via '
      . 'Silverpop fails, attempt to send that email using the standard mail '
      . 'mechanism.'),
    '#default_value' => variable_get('silverpop_use_standard_mail_as_fallback', TRUE),
  );

  $form['transactional']['silverpop_transactional_failure_threshold'] = array(
    '#type' => 'textfield',
    '#title' => t('Failure Threshold'),
    '#description' => t('The number of failed transactional email attempts to '
      . 'allow before suspending Silverpop delivery of transactional emails '
      . 'indefinitely.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => variable_get('silverpop_transactional_failure_threshold', NULL),
  );

  $form['transactional']['silverpop_transactional_failure_threshold_timespan'] = array(
    '#type' => 'textfield',
    '#title' => t('Failure Analysis Time-Span'),
    '#description' => t('The time period during which to count the number of '
      . 'failed transactional email attempts. You can enter this as a string '
      . 'like "1 month," "3 days," etc. If the given failure threshold is '
      . 'exceeded within the given time-span, Silverpop transactional email '
      . 'delivery will be suspended.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => variable_get('silverpop_transactional_failure_threshold_timespan', NULL),
  );

  $form['transactional']['silverpop_transactional_recipients_not_in_silverpop'] = array(
    '#type' => 'textarea',
    '#title' => t('Transactional Recipients Not In Silverpop'),
    '#description' => t('If your site sends transactional emails to recipients '
      . 'that do not exist as contacts in your Silverpop database (e.g. '
      . 'because they are not Drupal users), enter the email addresses of '
      . 'those recipients here. You can enter multiple addresses, separated by '
      . 'commas. Any transactional emails destined for these recipients will '
      . 'not be sent via Silverpop, but will be sent using Drupal\'s standard '
      . 'mail mechanism instead.'),
    '#cols' => 64,
    '#rows' => 5,
    '#default_value' => variable_get('silverpop_transactional_recipients_not_in_silverpop', NULL),
  );

  $form['reports'] = array(
    '#type' => 'fieldset',
    '#title' => t('Reports'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['reports']['transactional_dashboard_link'] = array(
    '#value' => '<p>'
      . t('You can view statistics about transactional mailings in '
      . 'interactive table format using the ')
      . l('transactional reporting dashboard', 'admin/reports/silverpop-transactional')
      . '</p>',
  );

  // Render this form in the standard system settings format...
  $form_output = system_settings_form($form);

  // ...and then add a custom submit handler.
  $form_output['#submit'][] = 'silverpop_transactional_admin_settings_form_custom_submit';

  return $form_output;
}

/**
 * Custom submit handler for Silverpop configuration form.
 * @param $form
 * @param $form_state
 */
function silverpop_transactional_admin_settings_form_custom_submit(&$form, &$form_state) {
  $values = $form_state['values'];
  // If the user has elected to use Silverpop to handle all system/transactional
  //  emails, indicate that this file declares an implementation of
  //  drupal_mail_wrapper(). That function will then be called by
  //  drupal_mail_send(), which would otherwise call mail().
  if ($values['silverpop_replace_standard_mail'] == TRUE) {
    variable_set('smtp_library', drupal_get_filename('module', 'silverpop'));
  }
  else {
    variable_set('smtp_library', '');
  }

  // Store relationships between Drupal transactional emails and SP
  //  autoresponders. I would be appalled if there weren't a nicer way to
  //  handle this (NRD 2013-07-08).
  $i = 1;
  $field_name = 'mailing_id_mapping_' . $i . '_drupal';
  while (array_key_exists($field_name, $values)) {
    $drupal_mail_key = $values[$field_name];
    $sp_mailing_id = $values['mailing_id_mapping_' . $i . '_sp'];
    $mail_ids = array(
      'drupal_mail_key' => $drupal_mail_key,
      'sp_mailing_id' => $sp_mailing_id,
    );
    $primary_keys = NULL;
    // Update the table using as the reference field whichever member of the
    //  pair is non-empty, preferring the drupal mail key.
    if (!empty($drupal_mail_key)) {
      $sql = 'SELECT count(drupal_mail_key) as num_rows
              FROM {silverpop_transactional_mapping}
              WHERE drupal_mail_key = "%s"';
      $result = db_fetch_array(db_query($sql, array($drupal_mail_key)));
      if ($result && $result['num_rows'] > 0) {
        $primary_keys = array(
          'drupal_mail_key',
        );
      }
    }
    if (!isset($primary_keys) && !empty($sp_mailing_id)) {
      $sql = 'SELECT count(sp_mailing_id) as num_rows
              FROM {silverpop_transactional_mapping}
              WHERE sp_mailing_id = %d';
      $result = db_fetch_array(db_query($sql, array($sp_mailing_id)));
      if ($result && $result['num_rows'] > 0) {
        $primary_keys = array(
          'sp_mailing_id',
        );
      }
    }
    // If a record with one of these values exists, update that record.
    if (isset($primary_keys)) {
      $result = drupal_write_record('silverpop_transactional_mapping', $mail_ids, $primary_keys);
    }
    // Otherwise, add a new record.
    else {
      $result = drupal_write_record('silverpop_transactional_mapping', $mail_ids);
    }

    $i++;
    $field_name = 'mailing_id_mapping_' . $i . '_drupal';
  }

}

// If this module is listed as providing an alternative to the standard mail
//  mechanism...
if (variable_get('smtp_library', '') == drupal_get_filename('module', 'silverpop')) {
  /**
   * Send system mailings via Silverpop rather than using the standard
   *  Drupal mail procedure.
   * @param $message
   */
  function drupal_mail_wrapper($message) {

    $recipient_email = $message['to'];
    if (empty($recipient_email)) {
      return FALSE;
    }
    else {
      $uid = NULL;
      $use_standard_mail = TRUE;

      // Check to see if the message recipient is in the list of known recipients
      //  who do not exist in Silverpop.
      $normalized_recipient_list = preg_replace('/' . PHP_EOL . '/', ',', variable_get('silverpop_transactional_recipients_not_in_silverpop', ''));
      $trimmed_recipient_list = preg_replace('/\s+/', '', $normalized_recipient_list);
      $non_sp_recipients = explode(',', $trimmed_recipient_list);

      // If the recipient is not in that list, attempt to send this mailing via
      //  Silverpop.
      if (!in_array($recipient_email, $non_sp_recipients)) {

        $sp_db_is_uid_keyed = variable_get('silverpop_db_is_uid_keyed', FALSE);
        if ($sp_db_is_uid_keyed) {
          // If the Silverpop database is keyed by user ID rather than email,
          //  determine the user ID that best corresponds to the given email
          //  address.
          //  By default, we will use user.mail, but first we let other modules hook
          //  into this process to associate a user ID with an email address in
          //  whatever way they choose. Any implementations of this hook should
          //  modify $uid by reference.
          module_invoke_all('silverpop_map_email_to_uid', $recipient_email, $uid);

          // If no other modules have provided a UID...
          if (empty($uid)) {
            // ...try to find a user whose main account email matches the given
            //  email address.
            $sql = "SELECT u.uid
              FROM {users} u
              WHERE u.mail = '%s'";

            $result = db_query($sql, $recipient_email);

            if ($result) {
              if ($row = db_fetch_array($result)) {
                $uid = $row['uid'];
              }
            }
          }

          if (!empty($uid)) {
            $sp = new silverpopAPI();
            $sp_result = $sp->sendEngageTransactionalEmailByUID($message['to'], $message['subject'], $message['body'], $uid, $message['id']);
          }
        }
        else {
          $sp = new silverpopAPI();
          $sp_result = $sp->sendEngageTransactionalEmail($message['to'], $message['subject'], $message['body'], $message['id']);
        }

        if (isset($sp_result) && is_array($sp_result) && $sp_result[0] == TRUE) {
          return TRUE;
        }

        // The attempt to send the email via Silveprop was unsuccessful (if the
        //  delivery had succeeded, we would have already returned by this point).
        // Log the failure.
        // @todo: get a nice error message from the SP response, and add it to the
        //  log message.
        $log_data = array(
          'drupal_mail_id' => $message['id'],
        );
        if (isset($sp_result)) {
          $log_data['sp_result'] = $sp_result;
        }
        silverpop_log('error', 'transactional_email_failure', $message['to'], $uid, $log_data);

        // Site administrators can elect to use the standard mail mechanism as a
        // backup in the event that a Silveprop transactional email fails.
        $use_standard_mail = variable_get('silverpop_use_standard_mail_as_fallback', TRUE);

        //  Suspend the Silverpop mail implementation indefinitely if a certain
        //  threshold has been reached (that threshold is configurable via the
        //  CMS).
        $sql = 'SELECT COUNT(id) FROM silverpop_log';
        $query_data = array();
        $failure_timespan = variable_get('silverpop_transactional_failure_threshold_timespan', FALSE);
        // If a failure analysis time-span has been specified, limit our query
        //  to failures that have occurred during that time-span.
        if (!empty($failure_timespan)) {
          $cutoff_time = strtotime('- ' . $failure_timespan);
          if ($cutoff_time) {
            $sql .= ' WHERE timestamp >= %d';
            $query_data[] = $cutoff_time;
          }
        }
        $failures = db_query($sql, $query_data);
        if ($failures) {
          if ($row = db_fetch_array($failures)) {
            // If the number of failures returned by our query exceeds the
            //  specified limit...
            $num_failures = (int) $row['COUNT(id)'];
            $failure_limit = variable_get('silverpop_transactional_failure_threshold', FALSE);
            if ($failure_limit && $num_failures > (int) $failure_limit) {
              // ...tell Drupal that this module no longer handles system
              //  mailings...
              variable_set('smtp_library', '');
              // ...and update our own variable accordingly. This means that SP
              //  will not be used to deliver transactional emails until an admin
              //  re-selects that option from the module admin form.
              variable_set('silverpop_replace_standard_mail', FALSE);
              // @todo: Tell the admin that this has happened, so he/she can
              //  correct any issues before re-enabling SP transactional email
              //  handling. Also allow admin to reset failure count on admin form
              //  (not purging data from SP log, but setting a timestamp var
              //  indicating when the count was cleared, which would then become
              //  part of our query) (NRD 2013-06-20).
            }
          }
        }
      }

      // Try to send this mailing using the standard Drupal mail mechanism
      //  (unless we tried to send it via SP and the admin has chosen not to use
      //  standard mail as a backup for SP failures).
      if ($use_standard_mail) {
        // Temporarily purge the variable that declares overrides to the standard
        //  mail method.
        $current_mail_implementation = variable_get('smtp_library', '');
        variable_set('smtp_library', '');
        // Call the standard mail function.
        $success = drupal_mail_send($message);
        // Then restore that variable to declare our override of the standard mail
        //  method. This method is slightly more elegant than duplicating the
        //  short contents of drupal_mail_send here.
        variable_set('smtp_library', $current_mail_implementation);
      }
      else {
        $success = FALSE;
      }

      return $success;
    }
  }
}
